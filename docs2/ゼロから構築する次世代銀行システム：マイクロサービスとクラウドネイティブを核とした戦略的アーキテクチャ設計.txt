ゼロから構築する次世代銀行システム：マイクロサービスとクラウドネイティブを核とした戦略的アーキテクチャ設計




はじめに


現代の金融業界における競争の主戦場は、もはや物理的な支店網ではなく、デジタルエコシステムへと完全に移行しました。FinTech、Big Tech、そしてチャレンジャーバンクの台頭は、俊敏性（アジリティ）、顧客体験（CX）、そして市場投入までのスピード（Speed-to-Market）が企業の存続を左右する新たな環境を生み出しています。
この新しい現実に対し、数十年前に構築された伝統的な銀行システムは、その構造的制約から十分に対応できなくなっています。本レポートは、新規の銀行事業立ち上げ、あるいは既存銀行の抜本的な変革において、その初期段階で行われるアーキテクチャの選択こそが、将来の成功を決定づける最も重要な要因であるという立場に立ちます。
本稿は、銀行システムをゼロから構築するための戦略的かつ技術的な青写真として機能します。過去のアーキテクチャの失敗を分析し、現代的な設計パラダイムを提示します。そして、技術選定から実装に至るまで、詳細かつ証拠に基づいた指針を提供し、最終的には経営層が取るべき行動指針を提言することを目的とします。


第1章 現代銀行システムの構造と課題




1.1 銀行システムの解剖学


銀行のITシステムは、単一の巨大な塊ではなく、それぞれが異なる役割と特性を持つ複数のシステム群から構成される複合体です 1。その構造を理解することは、現代的なアーキテクチャを設計する上での第一歩となります。
* 基幹系システム (Core Systems): 銀行業務の心臓部であり、その中核をなすのが勘定系システム (Core Banking System) です。勘定系は、銀行の三大業務である「預金」「融資」「為替」を処理します 1。口座残高の管理、利息計算、取引の実行といった機能を通じて、銀行の公式な台帳（元帳）としての役割を担っており 4、このシステムが停止することは銀行全体の業務停止を意味します 6。基幹系にはこの他に、市場での取引を管理する資金証券系システムや、国際業務を担う国際系システムも含まれます 1。
* 情報系システム (Information Systems): これらのシステムは、日々の業務を直接実行するのではなく、ビジネス活動を「支援」する役割を持ちます。経営管理レポートの作成、ビジネスインテリジェンス（BI）、マーケティング分析、顧客関係管理（CRM）などに利用されます 2。勘定系とは異なり、一時的に利用できなくなっても、日々の取引に壊滅的な影響を与えることはありません 9。
* チャネル系システム (Channel Systems) および 周辺系システム (Peripheral Systems): 顧客との接点（タッチポイント）を担うシステム群です。営業店の窓口で使われる端末（営業店システム）、ATM、インターネットバンキングやモバイルバンキングなどがこれに該当します 2。顧客と基幹系システムとを繋ぐインターフェースとして機能します。
* 対外接続系システム (External Connection Systems): 銀行を外部の世界と接続する神経系です。全国銀行データ通信システム（全銀システム）を介した他行との接続や、CAFISなどの決済ネットワーク、個人信用情報機関との連携を担います 1。
これらのシステムは相互に連携して動作します。例えば、顧客がATMで現金を引き出す場合、まずATM（チャネル系）が対外接続系システムを介して銀行のコンピュータに接続し、勘定系システムが取引を処理して口座残高を更新するという一連の流れが発生します 7。


1.2 レガシーシステムの「2025年の崖」


現在の銀行システムの多く、特に勘定系システムは、1980年代のメインフレーム時代に構築されたものが今なお稼働しています 2。数十年にわたる改修、文書化されていない変更、そして担当者の異動や退職が積み重なった結果、これらのシステムは内部の動作が完全には理解できなくなった「ブラックボックス」と化しています 2。
このブラックボックス化は、深刻なビジネスリスクをもたらします。障害発生時には原因の特定と修復に長時間を要し、新商品の投入や法制度の改正に対応するためのシステム改修は、大規模でリスクの高いプロジェクトとなります 2。これは、銀行のイノベーションと市場対応の俊敏性を直接的に阻害する要因です。
さらに、これらの巨大なモノリシック（一枚岩）システムを維持するためのコストは莫大であり、銀行の利益の相当部分を消費しています 2。この維持コストが、本来であれば革新的なプロジェクトに投じられるべき資金を圧迫し、技術的負債がさらに積み上がるという悪循環を生み出しているのです。


1.3 戦略的ITと守りのIT


このようなレガシーシステムの課題を克服するため、現代的なシステム刷新のアプローチでは、IT投資を2つの領域に分離する新しい設計思想が提唱されています。日立製作所の「OpenStage」などがその代表例です 17。
* 「攻めのIT」 (Offensive/Strategic IT): この領域は、俊敏性、データ駆動型の意思決定、そして迅速なサービス開発に焦点を当てます。新しい顧客体験や収益源を創出することが目的であり、アーキテクチャの中でも柔軟性が高く、変更が容易な部分に対応します。
* 「守りのIT」 (Defensive IT): この領域は、安定性、セキュリティ、効率性、そして規制遵守に焦点を当てます。中核となる台帳の不変性を保証し、業務が完璧に遂行されることを目的とします。これは、アーキテクチャの中でもトランザクションの中核を担う、堅牢な部分に対応します。
この分離は、単なる技術的な分類ではなく、リスクとビジネスの俊敏性に基づいた戦略的な判断を反映しています。勘定系はミッションクリティカルであり歴史的にモノリシックである一方 4、情報系は重要度が低く停止が許容されます 9。このビジネスインパクトの固有の違いこそが、アーキテクチャを分離すべき根本的な理由です。モノリシックなシステムでは、システム全体が最もクリティカルなコンポーネント（勘定系）のリスクプロファイルに縛られ、マーケティング分析のような俊敏性が求められる機能の足枷となってしまいます。「攻めのIT」と「守りのIT」という概念は、この現実を戦略的に認識した結果なのです。成功する新しいアーキテクチャは、すべての機能を同等に扱うのではなく、「守り」のコンポーネントの安定性を損なうことなく、「攻め」のコンポーネントを迅速に変更できる構造を創り出さなければなりません。


第2章 アーキテクチャパラダイムの選択：マイクロサービスへの移行


銀行システムをゼロから構築するにあたり、最も根源的な決定はアーキテクチャのパラダイム選択です。この選択は、将来のビジネスの速度と回復力を直接的に規定します。


2.1 モノリシック vs. マイクロサービス


* モノリシックアーキテクチャ (Monolithic Architecture): ユーザーインターフェース、ビジネスロジック、データアクセス層など、すべてのソフトウェアコンポーネントが単一の、密結合したコードベースで構築される伝統的なモデルです 18。開発の開始は比較的容易ですが、時間の経過とともに変更が指数関数的に複雑かつリスキーになります 18。
* マイクロサービスアーキテクチャ (Microservices Architecture): ソフトウェアを、それぞれが自身のプロセスで動作する、小さく独立したサービスの集合体として構成するアプローチです。各サービスは明確に定義されたインターフェース（通常はAPI）を介して通信し、単一のビジネス機能に責任を持ちます 18。
両者の比較は、現代のシステム設計における中心的な論点です。
* 開発とデプロイ: モノリシックは単一のユニットとしてデプロイされるため、小さな変更であってもシステム全体のリスクとなり、プロセスが遅くなります。一方、マイクロサービスは、小さな自律的なチームによって個別に開発、テスト、デプロイが可能です。これにより、継続的なデリバリーと迅速なイノベーションが実現します 18。
* スケーラビリティ: モノリシックはシステム全体としてスケールさせる必要があり非効率です。マイクロサービスでは、より多くのリソースを必要とするサービスだけを対象にスケールさせることができ、コストを最適化できます 18。
* 耐障害性（レジリエンス）: モノリシックでは、一部の機能の障害がアプリケーション全体のダウンを引き起こす可能性があります。マイクロサービスアーキテクチャでは、あるサービスの障害を隔離し、システムの他の部分が機能し続けることを可能にします。これは銀行にとって極めて重要な特性です 18。
* 複雑性: マイクロサービスは、システムの分散的な性質（多くの可動部品、ネットワーク通信）により、運用上の複雑性を増大させます 22。これは、適切な設計とツールによって管理されなければならない主要なトレードオフです。


2.2 ゼロからの開発におけるアーキテクチャ選定の論理的根拠


現代の金融市場は、迅速なイノベーション、パートナーとの連携（BaaS）、そして規制変更への適応能力を要求します。マイクロサービスが持つ固有の特性—デプロイの独立性、スケーラビリティ、耐障害性—は、これらのビジネスニーズを直接的にサポートします 24。モノリシックなアプローチは、開始は簡単かもしれませんが、レガシーシステムを苦しめる「ブラックボックス」的な硬直性を内包しており、新しいシステムを初日からレガシー化させる運命にあります 2。
したがって、今日ゼロから銀行システムを構築する場合、マイクロサービスアーキテクチャが唯一の合理的な選択肢となります。分散システムの計画と管理における初期のオーバーヘッドは、モノリシック設計がもたらす遥かに大きな長期的コストと戦略的麻痺を回避するための、必要不可欠な投資です。この選択は、単なる技術的な好みではなく、組織の将来の事業速度と回復力に関する戦略的なビジネス判断そのものです。モノリシックは初期の立ち上げやすさを優先する代わりに将来のスピードと柔軟性を犠牲にし、マイクロサービスは長期的な利益のために初期計画への投資を要求します 18。アーキテクチャが、ビジネスのオペレーションのリズムを決定するのです。
マイクロサービスの「複雑性」は、API管理、サービスディスカバリ、分散トレーシングといった、管理可能なエンジニアリング上の課題です 22。これらはAPIゲートウェイやサービスメッシュ、オブザーバビリティ（可観測性）プラットフォームといった確立されたソリューションで対処可能です。対照的に、モノリシックの「シンプルさ」は、巨大なコードベース内の隠れた依存関係という、はるかに危険で管理不能なビジネスの複雑性を覆い隠しています 2。この「ブラックボックス」の複雑性こそが、予測不可能なプロジェクトの遅延や壊滅的な障害を引き起こす元凶です。したがって、合理的な選択は、既知で管理可能な分散システムの複雑性に正面から取り組むことであり、未知で管理不能なモノリシックの複雑性を継承することではありません。


表1: モノリシックアーキテクチャとマイクロサービスアーキテクチャの定性的・定量的比較


特徴
	モノリシックアーキテクチャ
	マイクロサービスアーキテクチャ
	開発速度
	初期は速いが、規模が大きくなるにつれて急激に低下する
	初期計画に時間を要するが、長期的には並行開発により高速化する
	デプロイ頻度とリスク
	低頻度。変更がシステム全体に影響するためリスクが高い 18
	高頻度（1日に複数回も可能）。サービス単位でデプロイするためリスクが限定的 21
	スケーラビリティ
	アプリケーション全体でのスケーリングが必要で非効率 18
	特定のサービスのみを独立してスケーリングでき、効率的かつ経済的 18
	耐障害性
	単一障害点（SPOF）となりやすく、一部の障害が全体に波及する 18
	一つのサービスの障害が他に影響しにくく、システム全体の回復力が高い 18
	技術選定の柔軟性
	単一の技術スタックに縛られる
	サービスごとに最適なプログラミング言語やデータベースを選択可能
	組織構造への影響
	大規模な単一チームでの開発になりがち
	小規模で自律的なチーム（Two-Pizza Team）を編成しやすい
	初期の複雑性
	低い。単一のコードベースで始めやすい 18
	高い。分散システム特有の課題（サービス間通信など）への対応が必要 23
	長期的な保守性
	複雑化・ブラックボックス化しやすく、保守が困難になる 2
	サービスが小さく独立しているため、理解しやすく保守性が高い 18
	総所有コスト（TCO）
	初期コストは低いが、スケールや保守に伴う費用が増大する 18
	初期投資は高いが、効率的なスケーリングと保守により長期的にはコスト効率が良い 18
	

第3章 ドメイン駆動設計（DDD）によるサービスの分割戦略


マイクロサービスアーキテクチャを採用すると決めた後、次に直面する最大の課題は「どのようにサービスを分割するか」です。この問いに対する戦略的な指針を与えるのが、ドメイン駆動設計（Domain-Driven Design, DDD）です。


3.1 DDDの基本原則


DDDは、複雑な業務領域（ドメイン）を扱うソフトウェア開発において、そのドメインの深い理解に基づいたモデルを中心に据えるアプローチです 25。DDDは、マイクロサービスの複雑性を管理するための戦略的なツールを提供します。
* ユビキタス言語 (Ubiquitous Language): 開発者、ドメインエキスパート（業務専門家）、ビジネス関係者が共有する、曖昧さのない共通言語を構築することです。この言語は、あらゆるコミュニケーションやコードそのものの中で使用され、誤解を排除します 25。
* 境界づけられたコンテキスト (Bounded Context): マイクロサービス分割の核となる概念です。特定のドメインモデルが明確に定義され、一貫性を持つ、具体的な「境界」を指します 28。理想的には、各マイクロサービスが単一の境界づけられたコンテキストに対応します。
* ドメインの分類: DDDでは、ビジネス上の重要度に応じてドメインを分類し、リソース配分を戦略的に行います。
   * コアドメイン (Core Domain): ビジネスの競争優位性の源泉となる、最も重要で戦略的な部分です。組織で最も優秀な開発者はここに集中させるべきです 24。銀行にとっては、独自の融資審査アルゴリズムや、卓越した顧客体験などが該当します。
   * 支援サブドメイン (Supporting Subdomain): ビジネスに特有で必要不可欠ではあるものの、コアな差別化要因ではない機能です（例：カスタムの内部レポーティングツール） 24。
   * 汎用サブドメイン (Generic Subdomain): 認証やメール通知のように、そのビジネスに固有ではない「既製品」で解決できる問題領域です。これらは多くの場合、サードパーティのサービスやライブラリを利用して解決されます 24。
DDDは、ビジネス要件と技術的実装との間の戦略的な架け橋として機能します。DDDがなければ、チームはしばしば技術的なレイヤー（例：「UIサービス」「ロジックサービス」「DBサービス」）に基づいてサービスを分割してしまい、結果として高い結合度を持つ「分散モノリス」を再生産してしまいます。DDDは、アーキテクチャがビジネスドメインを忠実に反映することを強制します 28。例えば「融資サービス」は、一貫したビジネス概念です。この整合性により、融資に関するビジネス要件が変更された際に、修正が必要なサービスが一つに限定され、マイクロサービスの真の俊敏性が達成されるのです。


3.2 銀行業務ドメインのモデリング


サービスの分割プロセスは、銀行員、コンプライアンス担当者、リスク管理者といったドメインエキスパートと協力し、銀行業務の中に存在する境界づけられたコンテキストを特定することから始まります 29。
以下に、銀行における境界づけられたコンテキストと、それに対応するマイクロサービスの例を挙げます。
* 顧客管理コンテキスト (Customer Management Context): 顧客の本人情報、KYC（顧客確認）、連絡先情報、オンボーディングプロセスなどを扱います。これは**「顧客サービス (Customer Service)」**となります。
* 口座管理コンテキスト (Account Management Context): 預金口座、残高、取引明細などを管理します。これは**「口座サービス (Account Service)」**となり、銀行のコアドメインの一つです。
* 決済・為替コンテキスト (Payments & Transfers Context): 国内外の資金移動の実行に責任を持ちます。これは**「決済サービス (Payment Service)」**です。
* 融資コンテキスト (Lending Context): ローンの申し込み、与信審査から、実行、返済管理まで、融資のライフサイクル全体を管理します。これは**「融資サービス (Lending Service)」**です。
* 認証・認可コンテキスト (Identity & Access Context): ユーザーのログイン、権限管理、多要素認証などを扱う汎用サブドメインです。これは**「認証サービス (Auth Service)」**となります。
* 不正検知コンテキスト (Fraud Detection Context): 取引を分析し、不正なパターンを検知する支援サブドメイン（あるいは事業戦略によってはコアドメイン）です。これは**「不正検知サービス (Fraud Detection Service)」**です。
* 商品カタログコンテキスト (Product Catalog Context): 金融商品の定義やパラメータ（例：預金種別ごとの金利、ローン商品の条件）を管理します。これにより、新しい商品をコード開発ではなく設定で投入できるようになります。これは**「商品サービス (Product Service)」**です。
コンテキストを定義した後、「コンテキストマップ」を作成し、それらの間の関係性を明示的に定義します（例：「決済サービス」は資金を引き落とすために「口座サービス」に依存する） 34。このマップは、サービス間のインタラクションを理解する上で極めて重要です。
ドメインの分類（コア、支援、汎用）は、戦略的なリソース配分と技術選択（内製か購入か）のための強力なツールとなります。研究が示すように、最も優れた人材はコアドメインに投入すべきです 24。もし銀行の競争優位性が独自の投資プラットフォーム（コアドメイン）にあるならば、トップエンジニアのリソースをそこに集中投下すべきです。一方で、認証（汎用サブドメイン）には、実績のある市販のIDプロバイダーを利用するのが賢明です。内部向けのカスタムレポートツール（支援サブドメイン）は、標準的なチームで構築するか、場合によっては外部委託も可能です。このように、DDDの分類は、これらの重要な投資判断とアーキテクチャ決定を行うための明確なフレームワークを提供するのです。


第4章 クラウドネイティブ基盤の構築


アーキテクチャの論理設計が固まったら、次はその土台となる物理的・仮想的インフラストラクチャを構築します。現代の銀行システムにとって、その選択肢は実質的にクラウドしかありません。


4.1 クラウドファースト戦略


新しい銀行システムをオンプレミスで構築することは、戦略的に見て賢明ではありません。パブリッククラウド（AWS, Google Cloud, Azureなど）は、現代の銀行に不可欠な、比類なきスケーラビリティ、回復力、豊富なマネージドサービスの生態系、そして従量課金制のコストモデルを提供します 5。
金融機関にとって主要なクラウドプロバイダーは、それぞれ特徴的な強みを持っています。
* Amazon Web Services (AWS): 成熟した「金融機関向けリファレンスアーキテクチャ」を提供しており 36、みずほ銀行の部分的な移行 38 や英国のStarling Bank 39 など、金融機関での豊富な実績があります。
* Google Cloud Platform (GCP): BigQueryやVertex AIといったデータ分析・AI/ML基盤と、グローバルに一貫性のある水平スケーラブルなデータベース「Cloud Spanner」に強みを持ちます。Cloud Spannerは、みんなの銀行が採用を決めた重要な要因でした 40。
* Microsoft Azure: 包括的な「Microsoft Cloud for Financial Services」プラットフォームを提供し 41、特にエンタープライズ領域での強固な地位を築いています。
銀行におけるクラウド採用は、単なるコスト削減戦術から、イノベーションとコンプライアンス遵守のための戦略的必須要件へと成熟しました。初期のクラウド導入議論は運用コスト（OpEx）対設備投資（CapEx）に集中していましたが、現在の動向はより深い動機を示しています。銀行は、特定のクラウドが持つユニークな能力を求めて選択を行っています。例えば、みんなの銀行はCloud Spannerのトランザクション性能とスケーラビリティを 40、AWSはその成熟したリファレンスアーキテクチャと幅広いサービスポートフォリオを理由に選ばれています 37。さらに、これらのリファレンスアーキテクチャは、FISCのような規制フレームワークに明示的にマッピングされており 36、クラウドをコンプライアンス上の課題から、むしろコンプライアンスを加速させるツールへと変貌させています。


4.2 金融機関向けリファレンスアーキテクチャの活用


クラウドプロバイダーは、FISC準拠など、金融業界の厳格な要件を満たすために特別に設計されたリファレンスアーキテクチャを提供しています 36。
例えば、AWSの「金融機関向けリファレンスアーキテクチャ」は、「勘定系」「顧客チャネル」「OpenAPI」といった様々なワークロードに対し、事前に検証されたアーキテクチャパターンを提供します 37。これには、マルチアカウント戦略、セキュリティ、回復力（例：Step Functionsによるマルチリージョンでの自動フェイルオーバー、X-Rayによる可観測性）に関するベストプラクティスが組み込まれています 37。これらをベースラインとして活用することで、設計時間とコンプライアンスリスクを劇的に削減できます。


4.3 ハイブリッドクラウドとデータレジデンシー


既存の銀行にとって、「ビッグバン」型の全面的なクラウド移行はリスクが高すぎることが多く、ハイブリッドアプローチがより現実的です。メインフレームとの連携パターン（データレプリケーション、非同期メッセージング、ファイル転送）を用いることで、レガシーシステムと新しいクラウドネイティブなプラットフォームが共存し、相互に作用することが可能になります 42。
また、規制や性能要件（例：オンプレミスのデータベースへの極低遅延アクセス）により、一部のコンピューティングリソースをオンプレミスに保持する必要がある場合もあります。AWS Outpostsのようなソリューションは、クラウドプロバイダーのインフラとAPIを銀行自身のデータセンター内に拡張し、一貫した運用モデルを提供しながらこれらの制約を満たすことを可能にします 42。
この「ハイブリッドクラウド」モデルは、単なる一時的な移行ステップではなく、大手金融機関にとっては恒久的なアーキテクチャパターンとなりつつあります。新規のチャレンジャーバンクはクラウドに「オールイン」できますが、既存の金融機関は即時リプレースするにはリスクやコストが高すぎるメインフレームを抱えています。主要なクラウドプロバイダーが特定のメインフレーム連携アーキテクチャを導入したことは 42、この現実を認めたものです。これは、単にメインフレームを置き換えるのではなく、それを「包囲し拡張する」ことで、そのデータをクラウドで活用するという戦略への転換を示唆しています。これにより、ハイブリッドモデルは移行段階の一時的な姿ではなく、長期的で安定した状態として位置づけられるのです。


第5章 中核技術の選定と実装


アーキテクチャの全体像と基盤が定まったら、個々のマイクロサービスを構成する具体的な技術要素を選定し、実装します。現代の銀行スタックは、専門化された最良の技術を組み合わせた複合体であり、その鍵は統合能力にあります。


5.1 イベント駆動アーキテクチャ（EDA）による疎結合の実現


サービス間の連携において、直接的な同期的呼び出し（APIコール）に依存すると、呼び出し元と呼び出し先のサービスが密結合になり、一方がダウンすると他方も影響を受けるという脆弱性が生まれます。この問題を解決するのがイベント駆動アーキテクチャ（EDA）です。
EDAでは、サービスは直接互いを呼び出す代わりに、「イベント」を生成（Publish）し、他のサービスがそのイベントを購読（Subscribe）することで通信します。これにより、サービス間の結合度が劇的に下がり（疎結合）、回復力とスケーラビリティが向上します 44。
このイベント連携のバックボーンとして、事実上の標準となっているのが、高スループットで耐障害性に優れたメッセージングシステムであるApache Kafkaです 44。例えば、「顧客サービス」で顧客の住所が変更されると、
CustomerAddressChangedというイベントがKafkaに発行されます。このイベントを「融資サービス」や「カード発行サービス」が非同期で購読し、自身のデータを更新するといった連携が可能になります。


5.2 APIゲートウェイとBaaS戦略


マイクロサービス群への外部からのアクセスは、APIゲートウェイを単一のエントリーポイントとして集約します。APIゲートウェイは、認証、レート制限、ロギング、そして適切なマイクロサービスへのリクエストのルーティングといった、複数のサービスに共通する横断的な関心事を一手に引き受けます 49。
特に、資金移動やデータ更新を伴う「更新系API」においては、セキュリティが最重要課題です。一般的なセキュリティ対策では不十分であり、**FAPI（Financial-grade API）**への準拠が不可欠です。FAPIは、OAuth 2.0とOpenID Connectを基盤とし、金融グレードの高いセキュリティ要件を満たすために策定された厳格なプロファイルです。アクセストークンの漏洩や送信者のなりすましといった高度な攻撃を防ぐための仕組みが盛り込まれています 53。FAPIへの準拠は、デジタルエコシステムにおける信頼の前提条件です。みんなの銀行のようなイノベーターがFAPIを導入したことは 54、業界標準を確立する動きと言えます。FAPIを実装しない新しい銀行は、セキュリティ面で劣後していると見なされ、質の高いBaaSパートナーを惹きつけることは困難でしょう。
このセキュアなAPI層こそが、**BaaS（Banking as a Service）**戦略の基盤となります。銀行が持つ機能（口座開設、決済など）をAPIとしてサードパーティのFinTech企業や非金融事業者に提供することで、新たな収益源を創出することが可能になるのです 57。


5.3 目的別データベース戦略


マイクロサービスアーキテクチャでは、「一つのサイズがすべてに合うことはない（One Size Fits None）」という原則がデータベース選定にも適用されます。各サービスは自身のデータを所有し、他のサービスから直接アクセスされるべきではありません（Database per Serviceパターン） 60。これにより、データベースがサービス間の結合点となることを防ぎます。そして、データベース技術の選択は、そのサービスの特定のニーズに合わせて行われるべきです。
* 勘定系などの中核トランザクションサービス: 「口座管理」や「決済」といったサービスは、高スループット、低遅延、そして厳格なACID特性（原子性、一貫性、独立性、永続性）を必要とします。従来のRDBMSも選択肢ですが、現代的なNewSQLデータベース（例：Google Cloud Spanner, CockroachDB）は、RDBMSの持つ一貫性と、NoSQLの持つ水平スケーラビリティを両立するように設計されており、理想的な選択肢となります 61。みんなの銀行がSpannerを選択したことは、このアプローチの有効性を示す好例です 40。
* 情報系など分析・支援サービス: ビジネスインテリジェンスやレポーティングのためのシステムは、Amazon RedshiftやGoogle BigQueryのようなデータウェアハウス（DWH）が適しています。顧客の行動ログのような非構造化・半構造化データを扱うサービスでは、Amazon DynamoDBやDocumentDBのようなNoSQLデータベースが有効です 64。


表2: 銀行マイクロサービス向けデータベース選定ガイド




マイクロサービス （境界づけられたコンテキスト）
	ワークロード種別
	主要要件
	推奨データベース技術
	製品例
	口座サービス
	オンライントランザクション処理（OLTP）
	強力な一貫性（ACID）、高スループット、水平スケーラビリティ、高可用性
	NewSQL / 分散RDBMS
	Google Cloud Spanner, CockroachDB, TiDB, YugabyteDB
	決済サービス
	OLTP、イベント処理
	低遅延、高スループット、耐障害性
	NewSQL, インメモリDB
	Google Cloud Spanner, Redis, Oracle
	顧客サービス
	OLTP、ドキュメント管理
	柔軟なスキーマ、一貫性、検索性
	RDBMS, ドキュメントDB
	PostgreSQL, MySQL, Amazon DocumentDB
	融資サービス
	複雑なビジネスロジック、OLTP
	トランザクション、データの整合性、ワークフロー管理
	RDBMS, NewSQL
	PostgreSQL, Oracle DB, SQL Server
	不正検知サービス
	リアルタイム分析、グラフ分析
	超低遅延、複雑なクエリ、時系列データ処理
	NoSQL（グラフDB, Key-Value）
	Neo4j, Amazon Neptune, Amazon DynamoDB
	分析・レポーティングサービス
	オンライン分析処理（OLAP）
	大規模データ集計、高速な分析クエリ
	データウェアハウス（DWH）
	Google BigQuery, Amazon Redshift, Snowflake
	

5.4 サービス間トランザクション管理


各サービスが独自のデータベースを持つため、複数のサービスにまたがるビジネスプロセス（例：「注文」と「決済」と「在庫引き当て」）の一貫性をどう保つかという課題が生じます。伝統的な2フェーズコミットによる分散トランザクションは、マイクロサービス環境では可用性を著しく損なうため、実行可能な選択肢ではありません 60。
この課題に対する解決策がSagaパターンです。Sagaは、一連のローカルトランザクションのシーケンスとしてビジネスプロセスを実装します。各サービスは自身のデータベースに対してローカルなトランザクションをコミットします。もし途中のステップで処理が失敗した場合、Sagaはそれ以前に成功した各ステップの「補償トランザクション（Compensating Transaction）」を逆順に実行し、処理を取り消します。これにより、システム全体として結果整合性（Eventual Consistency）を保証します 60。
Sagaの管理方法には、中央のオーケストレーターが各サービスの呼び出しを管理するオーケストレーション型と、各サービスが互いのイベントに反応して自律的に連携するコレオグラフィ型があります 60。複雑なフローのデバッグや可視化の容易さから、新規構築においてはオーケストレーション型から始めることがしばしば推奨されます。


第6章 非機能要件の徹底：信頼と安全の担保


機能要件が「何をするか」を定義するのに対し、非機能要件は「どのようにするか」を定義し、システムの品質、信頼性、安全性を決定づけます。金融システムにおいて、非機能要件の達成は顧客からの信頼を得るための絶対条件です。


6.1 高可用性と無限の拡張性


金融システムは24時間365日、常に稼働し続けることが求められます。この高い可用性は、アーキテクチャのあらゆるレベルでの冗長化によって実現されます 68。クラウドネイティブな世界では、これはハードウェアの過剰なプロビジョニングではなく、動的なソフトウェア定義アーキテクチャによって達成されます。旧来のモデルでは、ピーク負荷に対応するために高価で巨大な冗長メインフレームを購入し、その大半を遊休させていました。対照的に、
アクティブ・アクティブ構成でのマルチリージョン（あるいはマルチデータセンター）展開が現代のゴールドスタンダードです。これは、システムが複数の地理的拠点で同時に稼働し、一方が障害に見舞われても、トラフィックがシームレスに残りの拠点にルーティングされる仕組みです 68。
また、システムは給料日やキャンペーン時などの予測不能な負荷急増に耐えなければなりません。この課題に対応するのが、クラウドネイティブのオートスケーリング機能です。CPU使用率やトラフィック量といったリアルタイムの負荷、あるいは市場のオープン前といった定義済みのスケジュールに基づき、サーバーインスタンスを自動的に増減させます 71。これにより、コストを最適化しつつ、常に最高のパフォーマンスを保証することが可能になります。これは、信頼性に対する静的なハードウェア中心の視点から、動的なソフトウェア中心の視点への根本的な転換を意味します。


6.2 鉄壁のセキュリティとコンプライアンス


現代のセキュリティの指導原則は「ゼロトラストアーキテクチャ」、すなわち「決して信頼せず、常に検証する（Never Trust, Always Verify）」です。ネットワークの内部からであろうと外部からであろうと、すべてのリクエストは認証・認可されなければなりません。
日本の金融機関にとって、FISC（金融情報システムセンター）の安全対策基準は、事実上の標準ガイドラインです 73。その最新版では、クラウド利用が明確に言及されています 74。金融機関がクラウドを利用する際に遵守すべき主要な要件は以下の通りです。
* クラウドサービスプロバイダーの徹底的な評価・選定 75。
* 責任共有モデルの理解（クラウド事業者は「クラウド自体のセキュリティ」に責任を持ち、利用者は「クラウド上のデータとアプリケーションのセキュリティ」に責任を持つ） 37。
* 強力なデータ保護（通信・保存データの暗号化）、アクセス制御（多要素認証）、そして堅牢なログ記録と監視の実装 74。
* 契約終了時におけるデータの適切な取り扱いと削除プロセスの確認 76。
また、金融庁のガイドラインも、リスクベースのアプローチ、サードパーティ（クラウド事業者）リスクの管理、そしてシャドーITの防止を含む、利用中の全クラウドサービスの包括的な棚卸しの必要性を強調しています 76。
これらの指針が示すのは、クラウドにおけるコンプライアンスは、単にチェックリストを埋める作業ではなく、継続的なリスク管理とガバナンスのプロセスであるということです。クラウド事業者が準拠したツールを提供していても、最終的な責任は銀行自身が負います 73。責任共有モデル 37、サードパーティリスク管理 77、継続的監視 79 の重視は、銀行のガバナンス・リスク・コンプライアンス部門が、物理サーバーの管理から、サービス設定とベンダー関係の管理へと進化しなければならないことを示しています。


6.3 AIを活用した高度不正検知


現代の不正実行者は、AIを含む高度な技術を駆使して正当なユーザーの行動を模倣します 80。従来のルールベースの検知システムでは、もはや十分ではありません。
これに対抗するためには、AIを活用した防御システムが不可欠です。現代的な不正検知システムは、リアルタイムのデータパイプラインとして構築されます。
* アーキテクチャ: 取引イベントが（Kafkaなどを通じて）ストリーム処理エンジンに流れ込みます。AI/MLモデルがこれらのイベントをリアルタイムで分析し、取引金額、場所、時間、顧客の過去の行動、デバイスの生体情報など、数百もの特徴量に基づいてリスクをスコアリングします 80。
* 説明可能なAI（XAI）: AIが単に取引を「不正」とフラグ付けするだけでは不十分です。規制当局を満足させ、人間の調査員を支援するために、なぜその取引が疑わしいと判断したのかを「説明」できなければなりません 82。
* データソース: システムは、取引データ、顧客の行動データ（キーストロークの動態、マウスの動き）、さらには他機関からのコンソーシアムデータなど、複数のデータストリームを統合し、より大きな不正パターンを検出します 80。


第7章 先進事例に学ぶ：国内外のチャレンジャーバンクの動向


本レポートで提唱するアーキテクチャは、理論上の空論ではありません。国内外の先進的なチャレンジャーバンクによって、その有効性はすでに証明されています。


7.1 国内の革新者


* みんなの銀行: 日本で初めて勘定系システムをパブリッククラウド上で稼働させたデジタルバンクです。同社がGoogle Cloudを選んだ理由は、BaaS戦略を実現するためのスケーラブルで柔軟なプラットフォームが必要だったためです。特に、グローバルに分散され、強い一貫性を持つデータベースであるGoogle Cloud Spannerは、初日から回復力の高いアクティブ・アクティブなシステムを構築する上で決定的な技術でした 40。また、コンテナオーケストレーションには
GKE (Google Kubernetes Engine) を活用し、最高レベルのセキュリティを確保するためにFAPIに準拠した強力なAPI戦略を持っています 54。
* GMOあおぞらネット銀行: 「テックファースト」を掲げ、豊富な銀行API群を通じて「組込型金融」戦略を積極的に推進するネット銀行です 59。AWS上でクラウドネイティブなアプローチを採用し、スピードと俊敏性を維持するために開発の内製化を重視しています 84。そのアーキテクチャは、BaaSプラットフォーム「sunabar」を支えるためにモジュラー構成で設計されています 85。


7.2 海外のリーダー


   * Starling Bank (英国): 創業当初から自社の全プラットフォーム「Engine」をAWS上で内製した、非常に成功しているデジタルバンクです 39。そのアーキテクチャは、マイクロサービス（約20のJavaサービス）、継続的デプロイメント（1日に数十回のリリー）、そしてクラウドネイティブ原則の優れた実践例です 39。このプラットフォームはモジュラー型かつAPIベースであり、その完成度の高さから、現在では他の銀行にSaaS製品としてライセンス提供されています 86。これは、内部の技術プラットフォームを商業製品へと昇華させた「攻めのIT」の究極形を示しています。
   * Monzo (英国): Google Cloud Platform上で稼働する、約3,000ものマイクロサービスからなる大規模なアーキテクチャを持つ、英国を代表するチャレンジャーバンクです 88。バックエンドにはGo言語、データストレージにはCassandra、そしてイベント駆動のバックボーンにはKafkaを使用しています 88。さらに、クラウド全体の障害にさえ耐えられるよう、完全に独立したバックアップ基盤「Monzo Stand-in」を構築しており、回復力に対する並外れたコミットメントを示しています 89。


7.3 成功の鍵


これらの成功事例には、共通する鍵が存在します。
   * アーキテクチャの純粋性: すべての成功事例は、クリーンなクラウドネイティブ、マイクロサービスファーストのアプローチから始まっています。古いパラダイムをクラウドに無理やり押し込もうとはしませんでした。
   * 内製エンジニアリング文化: これらの銀行は、「銀行ライセンスを持つテクノロジー企業」です。彼らは優秀な内製エンジニアリング人材と、スピードと自律性を重んじるDevOps文化に価値を置き、投資しています 90。
   * APIファーストとBaaSビジョン: 彼らは自社の銀行機能を、プログラム可能なサービスの集合体と捉えており、BaaSを通じてより広範なデジタル経済に参加することを可能にしています。
   * 戦略的な技術選択: みんなの銀行のSpanner採用や、MonzoのKafka・Cassandra採用のように、競争優位性を得るために、主要なコンポーネントに対して意図的かつ戦略的な技術選択を行っています。
これらの事例から導き出される最も重要な示唆は、最も成功しているデジタルバンクが、自社の技術プラットフォームをコストセンターとしてではなく、主要な「製品」であり競争上の「武器」として扱っているという点です。Starling Bankが自社の「Engine」プラットフォームをライセンス供与するという決定 86 は、この究極的な証明です。彼らは単に銀行を運営するためのシステムを構築したのではなく、他の銀行が購入したいと思うほど優れたシステムを構築したのです。これは、技術投資に対するROIの計算を根本的に変え、プラットフォーム自体が収益を生む資産となることを示しています。
また、これらのチャレンジャーバンクの技術スタックには、パブリッククラウド（AWS/GCP）、マイクロサービス、コンテナ（Docker/Kubernetes）、モダンなバックエンド言語（Go/Java）、イベントバス（Kafka）、スケーラブルなデータベース（Cassandra/Spanner）といった共通のパターンが見られます。しかし、真の差別化要因は、技術そのものではなく、その「実装」と「文化」にあります。Monzoの「Stand-in」による極端な回復力への注力 89 や、Starlingの驚異的なデプロイ速度 86 は、単なる技術選択の結果ではなく、エンジニアリングの規律と文化の賜物です。アーキテクチャが文化を可能にし、文化がアーキテクチャの価値を最大化するのです。


第8章 結論と戦略的提言


21世紀に銀行をゼロから構築することは、テクノロジー企業を構築することと同義です。モノリシックでオンプレミスな銀行システムの時代は終わりました。未来は、俊敏性のためのマイクロサービスアーキテクチャ、スケーラビリティと回復力のためのクラウドネイティブ基盤、そして複雑性を管理するためのドメイン駆動設計という3つの柱の上に築かれる、コンポーザブル（構成可能）でインテリジェント、かつオープンなプラットフォームにあります。
この分析に基づき、新たな銀行システムの構築を目指す経営層に対し、以下の戦略的提言を行います。
   1. 「APIファースト、BaaSレディ」の精神を徹底する: 閉じたシステムを設計してはなりません。パートナーに安全に公開できるサービスのプラットフォームを設計してください。これこそが将来の成長への道です。アーキテクチャは、初日からFAPIグレードのセキュリティを前提に構築されなければなりません。
   2. 技術だけでなく、エンジニアリング文化に投資する: StarlingやMonzoの成功は、彼らのエンジニアリング文化の証です。優秀なエンジニアリング人材を惹きつけ、維持し、明確なミッションと自律性を与えてその能力を最大限に引き出すことは、いかなる技術選択よりも重要です。
   3. DDDを戦略的規律として採用する: ドメイン駆動設計の導入を必須とすべきです。これには、技術チームとビジネスチーム双方が共通のユビキタス言語を開発するためのトレーニングへの投資が必要です。これは、新しいマイクロサービスシステムが「分散モノリス」へと劣化するのを防ぐ最も効果的な方法です。
   4. 意図的かつ「目的別」の技術選択を行う: 特にデータベースにおいて、「ワンサイズ・フィッツ・オール」のアプローチを避けるべきです。統制されたフレームワークの中で、チームがジョブに適したツールを選択する権限を与えてください。勘定系の元帳にNewSQLのような技術を戦略的に採用することは、性能と規模において持続的な競争優位性をもたらす可能性があります。
   5. 初日から回復力のために構築する: 障害を前提として設計してください。マルチリージョン、アクティブ・アクティブなデプロイメントを実装し、SagaやEDAのようなパターンを活用して、偶然ではなく設計によって回復力のあるシステムを構築してください。顧客からの信頼は、その上に成り立っています。
引用文献
   1. 銀行システム – FinBridge, 6月 22, 2025にアクセス、 https://www.finbridge.jp/overview/overview-bank/
   2. 銀行勘定系システムのモダナイゼーションを成功させるには | The ..., 6月 22, 2025にアクセス、 https://thefinance.jp/strategy/system_modernization
   3. 第1回 銀行のITシステム全体像と市場系システム概要 | CTC - 伊藤忠テクノソリューションズ, 6月 22, 2025にアクセス、 https://www.ctc-g.co.jp/report/column/it_system_of_bank/vol01.html
   4. business.ntt-west.co.jp, 6月 22, 2025にアクセス、 https://business.ntt-west.co.jp/glossary/words-00275.html#:~:text=%E5%8B%98%E5%AE%9A%E7%B3%BB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%A8%E3%81%AF,%E3%81%93%E3%81%A8%E3%81%8C%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%A7%E3%81%99%E3%80%82
   5. 勘定系システムとは？金融機関の基盤システムを分かりやすく解説 - テンファイブ株式会社, 6月 22, 2025にアクセス、 https://10-5.jp/blog-tenfive/3309/
   6. 勘定系システム - FinBridge, 6月 22, 2025にアクセス、 https://www.finbridge.jp/overview/overview-bank/overview-bankcore/
   7. 勘定系システムとは？主要銀行の一覧や仕組みをわかりやすく紹介 - 情シスナビ, 6月 22, 2025にアクセス、 https://josysnavi.jp/2022/accounting-system
   8. ソフィアが担う銀行システムとは｜採用情報, 6月 22, 2025にアクセス、 https://www.nttdsofia.co.jp/recruit/business/
   9. 基幹系システムと情報系システム ～基幹系と情報系は”分ける”のが鉄則｜データ分析用語を解説, 6月 22, 2025にアクセス、 https://www.gixo.jp/blog/289/
   10. 基幹系システムと情報系システム、それぞれの特徴と違い | 自治体情報セキュリティチャンネル, 6月 22, 2025にアクセス、 https://jichitai-sec.soliton.co.jp/core-system-information-system_2020_mkt_fsp
   11. miraie-group.jp, 6月 22, 2025にアクセス、 https://miraie-group.jp/sees/article/detail/finance_se_meaning#:~:text=%E9%8A%80%E8%A1%8C%E3%81%8C%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%81%E3%83%A3%E3%83%8D%E3%83%AB,%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82
   12. 金融系SEの意味とは？適している人の特徴や転職前に取得しておきたい資格も紹介, 6月 22, 2025にアクセス、 https://miraie-group.jp/sees/article/detail/finance_se_meaning
   13. 銀行の基幹系システムはなぜ複雑なのか？｜つっちーさん - note, 6月 22, 2025にアクセス、 https://note.com/tsuchie88/n/n3709b728e523
   14. 金融システムとは？基本情報からシステムの開発方法まで詳しく解説 - 発注ナビ, 6月 22, 2025にアクセス、 https://hnavi.co.jp/knowledge/blog/financial-system-something/
   15. 金融システムとは何か？ 種類や機能、開発方法を詳しく解説 - Ｓｋｙ株式会社, 6月 22, 2025にアクセス、 https://www.skygroup.jp/software/article/10/
   16. 勘定系システム - Wikipedia, 6月 22, 2025にアクセス、 https://ja.wikipedia.org/wiki/%E5%8B%98%E5%AE%9A%E7%B3%BB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0
   17. 日立オープン勘定系パッケージ「OpenStage」：金融ソリューション, 6月 22, 2025にアクセス、 https://www.hitachi.co.jp/products/it/finance/solutions/application/banking/corebanking/index.html
   18. モノリシックとマイクロサービス - ソフトウェア開発アーキテクチャ ..., 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/compare/the-difference-between-monolithic-and-microservices-architecture/
   19. マイクロサービスとは？概要やメリット、必要な技術などをわかりやすく解説 - SCSK, 6月 22, 2025にアクセス、 https://www.scsk.jp/sp/itpnavi/article/2025/03/microservices.html
   20. 勘定系システム~世界中の暮らしを支える金融界のインフラ - テンファイブ株式会社, 6月 22, 2025にアクセス、 https://10-5.jp/blog-tenfive/1778/
   21. マイクロサービスとは？メリットとデメリットを簡単解説 - NTTデータ イントラマート, 6月 22, 2025にアクセス、 https://www.intra-mart.jp/im-press/useful/microservice
   22. マイクロサービスとモノリシック アーキテクチャの比較 - Atlassian, 6月 22, 2025にアクセス、 https://www.atlassian.com/ja/microservices/microservices-architecture/microservices-vs-monolith
   23. モノリシックとマイクロサービスの違い | ブログ - Kong株式会社, 6月 22, 2025にアクセス、 https://jp.konghq.com/blog/monolith-vs-microservices
   24. ドメイン駆動設計を用いてマイクロサービスに分割することを ... - Qiita, 6月 22, 2025にアクセス、 https://qiita.com/tsukmr/items/1f8f68f7d9f28cd20380
   25. Domain Driven Design - Martin Fowler, 6月 22, 2025にアクセス、 https://martinfowler.com/bliki/DomainDrivenDesign.html
   26. DDD難民に捧げる Domain-Driven Designのエッセンス 第1回 ドメイン駆動設計とは, 6月 22, 2025にアクセス、 https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap1.html
   27. DDDを読んだときのメモ #読書 - Qiita, 6月 22, 2025にアクセス、 https://qiita.com/IYD37/items/015532111b2396463686
   28. 始めよう! ドメイン駆動設計＆マイクロサービス開発 ～C# と Azure Service Fabric で最高の DDD 開発を - SlideShare, 6月 22, 2025にアクセス、 https://www.slideshare.net/uesaka/c-azure-service-fabric-ddd
   29. ドメインモデリング｜【DDD入門】TypeScript × ドメイン駆動設計ハンズオン - Zenn, 6月 22, 2025にアクセス、 https://zenn.dev/yamachan0625/books/ddd-hands-on/viewer/chapter4_domain_modeling
   30. 実践DDD本 第2章「ドメイン」「サブドメイン」「境界づけられたコンテキスト」を読み解く - CodeZine, 6月 22, 2025にアクセス、 https://codezine.jp/article/detail/9744
   31. 実践オブジェクト指向設計サブ資料：③ドメインモデル中心設計 - Speaker Deck, 6月 22, 2025にアクセス、 https://speakerdeck.com/recruitengineers/shi-jian-obuziekutozhi-xiang-she-ji-sabuzi-liao-domeinmoderuzhong-xin-she-ji
   32. マイクロサービスのドメイン分析 - Azure Architecture Center - Learn Microsoft, 6月 22, 2025にアクセス、 https://learn.microsoft.com/ja-jp/azure/architecture/microservices/model/domain-analysis
   33. ドメイン駆動設計入門【DDDをわかりやすく解説】 - 楽水, 6月 22, 2025にアクセス、 https://rakusui.org/ddd/
   34. ERPの機能分析にドメイン駆動設計が使えないか #dddosaka - プログラマの思索, 6月 22, 2025にアクセス、 https://forza.cocolog-nifty.com/blog/2014/09/erp-dddosaka-b6.html
   35. 金融システム開発ができるオススメ開発会社13選 システムの役割から導入メリットまで徹底解説, 6月 22, 2025にアクセス、 https://hunny-inc.jp/contents/financial-system-development/
   36. 金融ビジネス必見！AWSリファレンスアーキテクチャ日本版の可能性 - KOTORA JOURNAL, 6月 22, 2025にアクセス、 https://www.kotora.jp/c/44512/
   37. 【開催報告 & 資料公開】金融リファレンスアーキテクチャ日本版 ..., 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/blogs/news/financereferencearchitectureproductionseminar202210/
   38. メガバンクの勘定系システムはクラウドへ移行するか--みずほ銀行 ..., 6月 22, 2025にアクセス、 https://japan.zdnet.com/article/35230097/
   39. Starling: How to Build a Bank in a Year - Container Solutions, 6月 22, 2025にアクセス、 https://blog.container-solutions.com/starling-how-to-build-a-bank-in-a-year
   40. 金融サービス業界向け Google Cloud ソリューション徹底解説 | クラウドエース株式会社, 6月 22, 2025にアクセス、 https://cloud-ace.jp/column/detail358/
   41. Microsoft Cloud for Financial Services の公式ドキュメント ..., 6月 22, 2025にアクセス、 https://learn.microsoft.com/ja-jp/industry/financial-services/
   42. 金融リファレンスアーキテクチャ日本版 v1.5 アップデートの ... - AWS, 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/blogs/news/fin-reference-arch-v1-5/
   43. 金融リファレンスアーキテクチャ日本版 v1.3アップデートのお知らせ | Amazon Web Services, 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/blogs/news/bleafsi-update-v1-3-0/
   44. 'リファレンスアーキテクチャ: Apache Kafka を使用したイベント ..., 6月 22, 2025にアクセス、 https://devcenter.heroku.com/ja/articles/event-driven-microservices-with-apache-kafka
   45. EDA とは? - イベント駆動型アーキテクチャの説明 - AWS, 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/what-is/eda/
   46. イベント駆動型 アーキテクチャの概要 - awsstatic.com, 6月 22, 2025にアクセス、 https://d1.awsstatic.com/psc-digital/2022/gc-300/event-driven-architectures-aws-guide/Event-Driven-Architectures-AWS-Guide-JP.pdf
   47. イベント駆動型アーキテクチャ（EDA）はAPI Gatewayとどのように連携するのか？ - API7.ai, 6月 22, 2025にアクセス、 https://api7.ai/ja/learning-center/api-gateway-guide/api-gateway-event-driven-architecture
   48. Cloud Events vs Apache Kafka イベントドリブンアーキテクチャ - Wallarm, 6月 22, 2025にアクセス、 https://www.wallarm.com/jp/cloud-native-products-101/cloud-events-vs-apache-kafka-event-driven-architectures
   49. APIセキュリティーとは - IBM, 6月 22, 2025にアクセス、 https://www.ibm.com/jp-ja/think/topics/api-security
   50. API セキュリティとは - Red Hat, 6月 22, 2025にアクセス、 https://www.redhat.com/ja/topics/security/api-security
   51. APIとは？仕組みや認証方法・セキュリティ面について - スパイラル株式会社, 6月 22, 2025にアクセス、 https://www.spiral-platform.co.jp/article/member/487/
   52. 金融 API の説明:その概要、機能、およびフィンテックに変化をもたらす仕組み - Stripe, 6月 22, 2025にアクセス、 https://stripe.com/jp/resources/more/financial-apis-explained-what-they-are-how-they-work-and-how-they-are-changing-fintech
   53. FAPIとは｜金融機関にとって重要な理由やセキュリティを解説, 6月 22, 2025にアクセス、 https://financial.ctc-g.co.jp/itinfo/fapi%E3%81%A8%E3%81%AF%EF%BD%9C%E9%87%91%E8%9E%8D%E6%A9%9F%E9%96%A2%E3%81%AB%E3%81%A8%E3%81%A3%E3%81%A6%E9%87%8D%E8%A6%81%E3%81%AA%E7%90%86%E7%94%B1%E3%82%84%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%82%92%E8%A7%A3%E8%AA%AC
   54. 国内銀行初、世界トップレベルのセキュリティ規格『FAPI』に準拠したBaaSプラットフォームを開発, 6月 22, 2025にアクセス、 https://corporate.minna-no-ginko.com/information/corporate/2022/09/29/227/
   55. API高度化に向けた取り組み, 6月 22, 2025にアクセス、 https://www.fisc.or.jp/FinTech_20240228_05.pdf
   56. みんなの銀行、API開発者ポータルを公開、参照/更新系や認証など各APIの仕様を閲覧可能に, 6月 22, 2025にアクセス、 https://it.impress.co.jp/articles/-/26490
   57. オープンAPIによるビジネス創造支援(API連携プラットフォーム ..., 6月 22, 2025にアクセス、 https://jpn.nec.com/fintech/api/index.html
   58. 「HULFT Square」導入事例 | 株式会社セブン銀行 ｜データ連携 データ活用のセゾンテクノロジー, 6月 22, 2025にアクセス、 https://www.hulft.com/casestudies/sej
   59. メディア掲載 | BaaS byGMOあおぞら, 6月 22, 2025にアクセス、 https://gmo-aozora.com/baas/media/article/2021/20210726.html
   60. マイクロサービスの Saga パターンについて #DDD - Qiita, 6月 22, 2025にアクセス、 https://qiita.com/yasuabe2613/items/b0c92ab8c45d80318420
   61. 「NewSQL」とは？改めて知りたいデータベースの最新動向 | DATA INSIGHT | NTTデータ, 6月 22, 2025にアクセス、 https://www.nttdata.com/jp/ja/trends/data-insight/2023/1219/
   62. データ管理の最前線 ～一貫性とスケール性を両立した新たなDBMSについて - NTTテクノクロス, 6月 22, 2025にアクセス、 https://www.ntt-tx.co.jp/column/db/240306/
   63. データベースの 新潮流 -NewSQLとHTAP-, 6月 22, 2025にアクセス、 https://mickindex.sakura.ne.jp/database/pdf/DevelopersSummit_Mick_NewSQL.pdf
   64. データベースの種類とは？～構造・製品ごとに解説～ - 株式会社システムインテグレータ, 6月 22, 2025にアクセス、 https://products.sint.co.jp/siob/blog/kindofdb
   65. AWSの各種DBサービスは一体いくつある？ユースケースに見る「使い分け」 - クラスメソッド, 6月 22, 2025にアクセス、 https://classmethod.jp/articles/aws-db/
   66. Hadoopとビッグデータ分析環境（SQL、NoSQL、DWH、構造化／非構造化） - デジテクブログ, 6月 22, 2025にアクセス、 https://degitech91.com/hadoop_bigdata/
   67. OracleデータベースのSagaによるマイクロサービス・トランザクションの簡素化, 6月 22, 2025にアクセス、 https://blogs.oracle.com/oracle4engineer/post/simplify-microservice-transactions-with-oracle-database-sagas-ja
   68. 冗長化とは？障害に強いシステムを作るための種類と仕組み - さくらのクラウド, 6月 22, 2025にアクセス、 https://cloud.sakura.ad.jp/column/redundantize/
   69. システムの冗長化とは？情シスなら知っておくべき基礎知識とメリット・デメリットを解説, 6月 22, 2025にアクセス、 https://agent.warc.jp/articles/8vutpbusu1
   70. システムの冗長化とは？フェールオーバーについても解説 - 株式会社アールワークス, 6月 22, 2025にアクセス、 https://www.rworks.jp/system/system-column/sys-entry/22145/
   71. オートスケーリングとは？仕組みや構成例からどんなサービスで必要なのかを紹介 | Amimoto, 6月 22, 2025にアクセス、 https://ja.amimoto-ami.com/news/autoscaling/
   72. Docker をフル活用して金融業界のシビアなパフォーマンス、セキュリティ要件に対応している株式会社Finatext石橋さんに、難しいポイントやアーキテクチャ上の工夫を伺いました – 後編 | AWS Startup ブログ, 6月 22, 2025にアクセス、 https://aws.amazon.com/jp/blogs/startup/tech-interview-finatext-2/
   73. 金融機関が情報システムを構築する際の安全対策基準「FISC安全対策基準」とは？ | Fujitsu Cloud Direct, 6月 22, 2025にアクセス、 https://clouddirect.jp.fujitsu.com/service/navi-beginner-fisc
   74. FISC安全対策基準とは｜企業の活用方法とクラウドサービスの ..., 6月 22, 2025にアクセス、 https://www.obc.co.jp/360/list/post436
   75. 金融業界における「FISC安全対策基準」の役割と重要性 | assured.jp, 6月 22, 2025にアクセス、 https://assured.jp/column/knowledge-fisc
   76. 金融庁「金融分野におけるサイバーセキュリティに関するガイドライン」を解説 | assured.jp, 6月 22, 2025にアクセス、 https://assured.jp/column/fsa-guideline-explanation
   77. 【2025年最新】金融機関のサイバーセキュリティガイドライン完全解説 | サードパーティリスク管理の重要ポイント | 株式会社レンズ - Lens RM, 6月 22, 2025にアクセス、 https://lensinc.jp/lensrm/blog/fsa-financial-cybersecurity-guideline-2024/
   78. 金融分野におけるサイバーセキュリティに関する ガイドライン 令和６年 10 月４日 金融庁, 6月 22, 2025にアクセス、 https://www.fsa.go.jp/news/r6/sonota/20241004/18.pdf
   79. クラウドの設定不備を常時監視！クラウドセキュリティ統制支援サービスがFISC安全対策基準に対応 | LAC WATCH - ラック, 6月 22, 2025にアクセス、 https://www.lac.co.jp/lacwatch/service/20211221_002819.html
   80. フィンセキュリティ革命：クレカ・金融不正利用を防ぐAI技術 - Zenn, 6月 22, 2025にアクセス、 https://zenn.dev/taku_sid/articles/20250404_ai_fraud_prevention
   81. クレジットカードの不正利用を未然に防ぐ「AI不正検知」 そのメリットと効果は？ - 電通デジタル, 6月 22, 2025にアクセス、 https://www.dentsudigital.co.jp/knowledge-charge/articles/2022/1012-ai-fraud-detection
   82. 金融犯罪対策の最前線！AI不正検知の最新技術トレンド - SREホールディングス, 6月 22, 2025にアクセス、 https://ac.sre-group.co.jp/blog/financial-crime-measures
   83. 金融不正防止のためのルールベース AI モデルの構築 - Databricks, 6月 22, 2025にアクセス、 https://www.databricks.com/jp/solutions/accelerators/fraud-detection
   84. ARI導入事例： GMOあおぞらネット銀行が提供するBaaSへのAWS導入をARIのcnarisチームが支援 - PR TIMES, 6月 22, 2025にアクセス、 https://prtimes.jp/main/html/rd/p/000000045.000066765.html
   85. GMOあおぞらネット銀行 sunabar コミュニティイベント「ディーカレットDCPと語る、民間デジタル通貨の変遷」セミナーレポート, 6月 22, 2025にアクセス、 https://note.decurret-dcp.com/n/ne1b475eb2a85
   86. Engine by Starling: From launching a bank to launching a software business - PwC, 6月 22, 2025にアクセス、 https://www.pwc.com/gx/en/about/case-studies/engine-by-starling-launching-bank-software-business.html
   87. The complete digital banking platform. - Storyblok, 6月 22, 2025にアクセス、 https://a.storyblok.com/f/311521/x/3adb333e8e/enginebystarling_brochure_nov_digital_opt1.pdf
   88. Monzo Tech Stack | Himalayas, 6月 22, 2025にアクセス、 https://himalayas.app/companies/monzo/tech-stack
   89. Monzo Blog - Technology, 6月 22, 2025にアクセス、 https://monzo.com/blog/topic/technology
   90. Starting from scratch as a new engineer at Monzo, 6月 22, 2025にアクセス、 https://monzo.com/blog/starting-from-scratch-as-a-new-engineer-at-monzo
   91. Starling Bank Case Study - AWS Marketplace, 6月 22, 2025にアクセス、 https://aws.amazon.com/solutions/case-studies/Starling-Bank-AWS-Marketplace/